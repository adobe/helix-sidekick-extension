/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const path = require('path');
const { chromium } = require('playwright');
const { test: base } = require('@playwright/test');

const test = base.extend({
  // eslint-disable-next-line no-empty-pattern
  context: async ({}, use) => {
    const pathToExtension = path.join(__dirname, '../src/extension');
    const context = await chromium.launchPersistentContext('', {
      headless: false,
      args: [
        `--disable-extensions-except=${pathToExtension}`,
        `--load-extension=${pathToExtension}`,
      ],
    });
    await use(context);
    await context.close();
  },
  extensionId: async ({ context }, use) => {
    let [background] = context.serviceWorkers();
    if (!background) {
      background = await context.waitForEvent('serviceworker');
    }
    const extensionId = background.url().split('/')[2];
    await use(extensionId);
  },
});

test.beforeEach(async ({ page }) => {
  await page.route('**/*', (route) => {
    console.log('>>>', route.request().url());
    if (route.request().url() === 'https://adobe.sharepoint.com/:w:/r/sites/cg-helix/_layouts/15/Doc.aspx?sourcedoc=%7BE8EC80CB-24C3-4B95-B082-C51FD8BC8760%7D&file=bla.docx&action=default&mobileredirect=true') {
      route.fulfill({
        status: 200,
        body: 'hello, word',
      });
      return;
    }
    route.continue();
  });
});

test('opens sidekick', async ({ page, extensionId }) => {
  await page.goto(`chrome-extension://${extensionId}/options.html`);
  await page.evaluate(() => {
    chrome.storage.local.set({ hlxSidekickDisplay: true });
  });
  await page.evaluate(async () => {
    await window.setProject({
      id: 'adobe/helix-test-content-onedrive/main',
      giturl: 'https://github.com/adobe/helix-test-content-onedrive/tree/main',
      mountpoints: [
        'https://adobe.sharepoint.com/sites/cg-helix/Shared%20Documents/helix-test-content-onedrive',
      ],
      owner: 'adobe',
      repo: 'helix-test-content-onedrive',
      ref: 'main',
      project: 'Helix Test Content Onedrive',
    });
  });

  await page.goto('https://main--helix-test-content-onedrive--adobe.hlx.page');
  // await page.goto('https://adobe.sharepoint.com/:w:/r/sites/cg-helix/_layouts/15/Doc.aspx?sourcedoc=%7BE8EC80CB-24C3-4B95-B082-C51FD8BC8760%7D&file=bla.docx&action=default&mobileredirect=true');
  await page.pause();
});
